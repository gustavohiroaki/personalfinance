name: Go

on:
  pull_request: {}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tagExists: ${{ steps.tag_verification.outputs.tagExists }}
      version: ${{ steps.extract_version.outputs.version }}
      containsRc: ${{ steps.contains_rc.outputs.containsRc }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Extract version from main.go
        id: extract_version
        run: |
          # Extraindo a versÃ£o a partir da constante definida em main.go
          VERSION=$(grep -oP 'const Version\s*=\s*"\K[^"]+' main.go)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Contains rc
        id: contains_rc
        run: |
          if [[ ${{ steps.extract_version.outputs.version }} == *"rc"* ]]; then
            echo "containsRc=true" >> $GITHUB_OUTPUT
          else
            echo "containsRc=false" >> $GITHUB_OUTPUT
          fi

      - name: Docker tag verification
        id: tag_verification
        run: |
          TAG_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/personalfinance/tags/${{ steps.extract_version.outputs.version }})
          if [ "$TAG_EXISTS" -eq 200 ]; then
            echo "tagExists=true" >> $GITHUB_OUTPUT
          else
            echo "tagExists=false" >> $GITHUB_OUTPUT
          fi
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/personalfinance
          TAG: ${{ steps.extract_version.outputs.version }}

  create_release:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.tagExists == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            if (${{ needs.build.outputs.containsRc }} === 'true') {
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/v${{ needs.build.outputs.version }}',
                sha: context.sha
              })
            } else {
              echo "Release candidate versions are not allowed in CI." >&2
              exit 1
            }
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/personalfinance:v${{ needs.build.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/personalfinance:latest
